// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package errors

import (
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

const (
	Errors_MissingName    = "User_MissingName"
	Errors_ContentMissing = "User_ContentMissing"
)

func IsMissingName(err error) bool {
	return errors.Reason(err) == Errors_MissingName
}

func IsContentMissing(err error) bool {
	return errors.Reason(err) == Errors_ContentMissing
}

const (
	Errors_MissingMobile       = "Auth_MissingMobile"
	Errors_MissingPassword     = "Auth_MissingPassword"
	Errors_AlreadyExistsMobile = "Auth_AlreadyExistsMobile"
	Errors_AlreadyExistsCode   = "Auth_AlreadyExistsCode"
	Errors_MissingSource       = "Auth_MissingSource"
	Errors_RegisterFail        = "Auth_RegisterFail"
	Errors_LoginFail           = "Auth_LoginFail"
	Errors_FormatBirthday      = "Auth_FormatBirthday"
)

func IsMissingMobile(err error) bool {
	return errors.Reason(err) == Errors_MissingMobile
}

func IsMissingPassword(err error) bool {
	return errors.Reason(err) == Errors_MissingPassword
}

func IsAlreadyExistsMobile(err error) bool {
	return errors.Reason(err) == Errors_AlreadyExistsMobile
}

func IsAlreadyExistsCode(err error) bool {
	return errors.Reason(err) == Errors_AlreadyExistsCode
}

func IsMissingSource(err error) bool {
	return errors.Reason(err) == Errors_MissingSource
}

func IsRegisterFail(err error) bool {
	return errors.Reason(err) == Errors_RegisterFail
}

func IsLoginFail(err error) bool {
	return errors.Reason(err) == Errors_LoginFail
}

func IsFormatBirthday(err error) bool {
	return errors.Reason(err) == Errors_FormatBirthday
}

const (
	Errors_MissingProfile = "Profile_MissingProfile"
)

func IsMissingProfile(err error) bool {
	return errors.Reason(err) == Errors_MissingProfile
}

const (
	Errors_MissingAddress = "Address_MissingAddress"
)

func IsMissingAddress(err error) bool {
	return errors.Reason(err) == Errors_MissingAddress
}
