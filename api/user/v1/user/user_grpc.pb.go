// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	GetMobile(ctx context.Context, in *MobileRequest, opts ...grpc.CallOption) (*MobileReply, error)
	ModifyPassword(ctx context.Context, in *ModifyPassRequest, opts ...grpc.CallOption) (*ModifyPassReply, error)
	ModifyMobile(ctx context.Context, in *ModifyMobileRequest, opts ...grpc.CallOption) (*ModifyMobileReply, error)
	ModifyName(ctx context.Context, in *ModifyNameRequest, opts ...grpc.CallOption) (*ModifyNameReply, error)
	FindMobile(ctx context.Context, in *FindMobileRequest, opts ...grpc.CallOption) (*FindMobileReply, error)
	FindCode(ctx context.Context, in *FindCodeRequest, opts ...grpc.CallOption) (*FindCodeReply, error)
	FindLikeMobileList(ctx context.Context, in *FindLikeMobileRequest, opts ...grpc.CallOption) (*List, error)
	FindInMobileList(ctx context.Context, in *FindInMobileRequest, opts ...grpc.CallOption) (*List, error)
	FindID(ctx context.Context, in *FindIdRequest, opts ...grpc.CallOption) (*FindIdReply, error)
	FindInIDList(ctx context.Context, in *FindInIdRequest, opts ...grpc.CallOption) (*List, error)
	FindSourceList(ctx context.Context, in *FindSourceRequest, opts ...grpc.CallOption) (*List, error)
	SourceTypeList(ctx context.Context, in *SourceTypeRequest, opts ...grpc.CallOption) (*SourceTypeReply, error)
	SearchPage(ctx context.Context, in *SearchPageRequest, opts ...grpc.CallOption) (*List, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) GetMobile(ctx context.Context, in *MobileRequest, opts ...grpc.CallOption) (*MobileReply, error) {
	out := new(MobileReply)
	err := c.cc.Invoke(ctx, "/api.user.v1.user.User/GetMobile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ModifyPassword(ctx context.Context, in *ModifyPassRequest, opts ...grpc.CallOption) (*ModifyPassReply, error) {
	out := new(ModifyPassReply)
	err := c.cc.Invoke(ctx, "/api.user.v1.user.User/ModifyPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ModifyMobile(ctx context.Context, in *ModifyMobileRequest, opts ...grpc.CallOption) (*ModifyMobileReply, error) {
	out := new(ModifyMobileReply)
	err := c.cc.Invoke(ctx, "/api.user.v1.user.User/ModifyMobile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ModifyName(ctx context.Context, in *ModifyNameRequest, opts ...grpc.CallOption) (*ModifyNameReply, error) {
	out := new(ModifyNameReply)
	err := c.cc.Invoke(ctx, "/api.user.v1.user.User/ModifyName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FindMobile(ctx context.Context, in *FindMobileRequest, opts ...grpc.CallOption) (*FindMobileReply, error) {
	out := new(FindMobileReply)
	err := c.cc.Invoke(ctx, "/api.user.v1.user.User/FindMobile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FindCode(ctx context.Context, in *FindCodeRequest, opts ...grpc.CallOption) (*FindCodeReply, error) {
	out := new(FindCodeReply)
	err := c.cc.Invoke(ctx, "/api.user.v1.user.User/FindCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FindLikeMobileList(ctx context.Context, in *FindLikeMobileRequest, opts ...grpc.CallOption) (*List, error) {
	out := new(List)
	err := c.cc.Invoke(ctx, "/api.user.v1.user.User/FindLikeMobileList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FindInMobileList(ctx context.Context, in *FindInMobileRequest, opts ...grpc.CallOption) (*List, error) {
	out := new(List)
	err := c.cc.Invoke(ctx, "/api.user.v1.user.User/FindInMobileList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FindID(ctx context.Context, in *FindIdRequest, opts ...grpc.CallOption) (*FindIdReply, error) {
	out := new(FindIdReply)
	err := c.cc.Invoke(ctx, "/api.user.v1.user.User/FindID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FindInIDList(ctx context.Context, in *FindInIdRequest, opts ...grpc.CallOption) (*List, error) {
	out := new(List)
	err := c.cc.Invoke(ctx, "/api.user.v1.user.User/FindInIDList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FindSourceList(ctx context.Context, in *FindSourceRequest, opts ...grpc.CallOption) (*List, error) {
	out := new(List)
	err := c.cc.Invoke(ctx, "/api.user.v1.user.User/FindSourceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SourceTypeList(ctx context.Context, in *SourceTypeRequest, opts ...grpc.CallOption) (*SourceTypeReply, error) {
	out := new(SourceTypeReply)
	err := c.cc.Invoke(ctx, "/api.user.v1.user.User/SourceTypeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SearchPage(ctx context.Context, in *SearchPageRequest, opts ...grpc.CallOption) (*List, error) {
	out := new(List)
	err := c.cc.Invoke(ctx, "/api.user.v1.user.User/SearchPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	GetMobile(context.Context, *MobileRequest) (*MobileReply, error)
	ModifyPassword(context.Context, *ModifyPassRequest) (*ModifyPassReply, error)
	ModifyMobile(context.Context, *ModifyMobileRequest) (*ModifyMobileReply, error)
	ModifyName(context.Context, *ModifyNameRequest) (*ModifyNameReply, error)
	FindMobile(context.Context, *FindMobileRequest) (*FindMobileReply, error)
	FindCode(context.Context, *FindCodeRequest) (*FindCodeReply, error)
	FindLikeMobileList(context.Context, *FindLikeMobileRequest) (*List, error)
	FindInMobileList(context.Context, *FindInMobileRequest) (*List, error)
	FindID(context.Context, *FindIdRequest) (*FindIdReply, error)
	FindInIDList(context.Context, *FindInIdRequest) (*List, error)
	FindSourceList(context.Context, *FindSourceRequest) (*List, error)
	SourceTypeList(context.Context, *SourceTypeRequest) (*SourceTypeReply, error)
	SearchPage(context.Context, *SearchPageRequest) (*List, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) GetMobile(context.Context, *MobileRequest) (*MobileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMobile not implemented")
}
func (UnimplementedUserServer) ModifyPassword(context.Context, *ModifyPassRequest) (*ModifyPassReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyPassword not implemented")
}
func (UnimplementedUserServer) ModifyMobile(context.Context, *ModifyMobileRequest) (*ModifyMobileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyMobile not implemented")
}
func (UnimplementedUserServer) ModifyName(context.Context, *ModifyNameRequest) (*ModifyNameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyName not implemented")
}
func (UnimplementedUserServer) FindMobile(context.Context, *FindMobileRequest) (*FindMobileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMobile not implemented")
}
func (UnimplementedUserServer) FindCode(context.Context, *FindCodeRequest) (*FindCodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCode not implemented")
}
func (UnimplementedUserServer) FindLikeMobileList(context.Context, *FindLikeMobileRequest) (*List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindLikeMobileList not implemented")
}
func (UnimplementedUserServer) FindInMobileList(context.Context, *FindInMobileRequest) (*List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindInMobileList not implemented")
}
func (UnimplementedUserServer) FindID(context.Context, *FindIdRequest) (*FindIdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindID not implemented")
}
func (UnimplementedUserServer) FindInIDList(context.Context, *FindInIdRequest) (*List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindInIDList not implemented")
}
func (UnimplementedUserServer) FindSourceList(context.Context, *FindSourceRequest) (*List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSourceList not implemented")
}
func (UnimplementedUserServer) SourceTypeList(context.Context, *SourceTypeRequest) (*SourceTypeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SourceTypeList not implemented")
}
func (UnimplementedUserServer) SearchPage(context.Context, *SearchPageRequest) (*List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPage not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_GetMobile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MobileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetMobile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.user.User/GetMobile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetMobile(ctx, req.(*MobileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ModifyPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyPassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ModifyPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.user.User/ModifyPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ModifyPassword(ctx, req.(*ModifyPassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ModifyMobile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyMobileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ModifyMobile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.user.User/ModifyMobile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ModifyMobile(ctx, req.(*ModifyMobileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ModifyName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ModifyName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.user.User/ModifyName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ModifyName(ctx, req.(*ModifyNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FindMobile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindMobileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FindMobile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.user.User/FindMobile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FindMobile(ctx, req.(*FindMobileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FindCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FindCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.user.User/FindCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FindCode(ctx, req.(*FindCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FindLikeMobileList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindLikeMobileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FindLikeMobileList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.user.User/FindLikeMobileList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FindLikeMobileList(ctx, req.(*FindLikeMobileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FindInMobileList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindInMobileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FindInMobileList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.user.User/FindInMobileList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FindInMobileList(ctx, req.(*FindInMobileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FindID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FindID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.user.User/FindID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FindID(ctx, req.(*FindIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FindInIDList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindInIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FindInIDList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.user.User/FindInIDList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FindInIDList(ctx, req.(*FindInIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FindSourceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FindSourceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.user.User/FindSourceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FindSourceList(ctx, req.(*FindSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SourceTypeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SourceTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SourceTypeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.user.User/SourceTypeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SourceTypeList(ctx, req.(*SourceTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SearchPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SearchPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.user.User/SearchPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SearchPage(ctx, req.(*SearchPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.user.v1.user.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMobile",
			Handler:    _User_GetMobile_Handler,
		},
		{
			MethodName: "ModifyPassword",
			Handler:    _User_ModifyPassword_Handler,
		},
		{
			MethodName: "ModifyMobile",
			Handler:    _User_ModifyMobile_Handler,
		},
		{
			MethodName: "ModifyName",
			Handler:    _User_ModifyName_Handler,
		},
		{
			MethodName: "FindMobile",
			Handler:    _User_FindMobile_Handler,
		},
		{
			MethodName: "FindCode",
			Handler:    _User_FindCode_Handler,
		},
		{
			MethodName: "FindLikeMobileList",
			Handler:    _User_FindLikeMobileList_Handler,
		},
		{
			MethodName: "FindInMobileList",
			Handler:    _User_FindInMobileList_Handler,
		},
		{
			MethodName: "FindID",
			Handler:    _User_FindID_Handler,
		},
		{
			MethodName: "FindInIDList",
			Handler:    _User_FindInIDList_Handler,
		},
		{
			MethodName: "FindSourceList",
			Handler:    _User_FindSourceList_Handler,
		},
		{
			MethodName: "SourceTypeList",
			Handler:    _User_SourceTypeList_Handler,
		},
		{
			MethodName: "SearchPage",
			Handler:    _User_SearchPage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/user/v1/user/user.proto",
}
